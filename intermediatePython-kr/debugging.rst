Debugging
---------

디버깅은 버그를 잡아내는 기술을 엄청나게 향상 시켜주는 것중 하나이지만,
많은 신입들이 Python debugger(``pdb``)를 무시하고 있습니다. 
이곳에서는 중요한 명령어 몇가지만 알려 드릴 것입니다.
공식 문서에서 더욱 더 많은 것을 배울 수 있습니다.

**커맨드라인 에서 실행 시키세요**

스크립트를 커맨드라인에서 실행 시키는 것으로 Python debugger를 실행 시킬 수
있습니다.
다음은 예제입니다.:

.. code:: python

    $ python -m pdb my_script.py

debugger가 첫번째 상태를 찾으면 실행을 멈출 것입니다. 이 방법은 스크립트가
짧을때 유용한 방법입니다. 라인 하나 하나씩 진행해 나가며 변수들을 체크할 수
있습니다.

**스크립트 안에서 실행 시키세요**

``pdb.set_trace()`` metode를 이용하여 원하는 곳에 break points를 설정하고 
변수를 체크하고 특별한 지점을 점검할 수 있습니다.

.. code:: python

    import pdb

    def make_bread():
        pdb.set_trace()
        return "I don't have time"

    print(make_bread())

위 스크립트를 저장하고 실행 시켜보세요. 실행 시킴과 동시에 debugger에 들어 갈
것입니다. 이제 디버거의 몇 가지 명령어를 배워볼 시간입니다.

**명령어들:**

-  ``c``: 다음 break point까지 계속 실행하기
-  ``w``: 콜스택 출력
-  ``a``: 해당 함수의 인자값 출력하기
-  ``s``: 다음 문장으로 이동. 함수 호출인 경우 내부로 들어감
-  ``n``: 다음 문장으로 이동. 함수 호출인 경우 함수를 한번 실행함

``n``\ ext와 ``s``\ tep은 멈추는 지점이 함수 내부냐 또는 함수를 실행시킨 후의
다음라인이냐의 차이점이 있습니다.

이것은 몇가지의 명령어들 입니다. ``pdb`` 는 post mortem 도 지원합니다. (이것은
함수를 손볼 수 있습니다.??) 공식 문서를 보고 ``pdb`` 에 대해서 더욱 공부해
보셨으면 합니다.
